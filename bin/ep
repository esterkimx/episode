#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/episode'

PROGRAM_NAME = File.basename($PROGRAM_NAME)
CFG_FILENAME = '.episode'
CFG_GLOBAL_DIR = ENV['XDG_CONFIG_HOME'] || File.join(ENV['HOME'], '.config')
CFG_GLOBAL_PATH = File.join(CFG_GLOBAL_DIR, 'episode')

options = {}

opt_parser = 
  OptionParser.new do |opts|
    opts.program_name = 'episode'
    opts.version = "v#{Episode::VERSION}"
    opts.banner = <<~EOS
      Usage: #{PROGRAM_NAME} <command> [options]  

        Quick start:
          ep ls                            Show episodes in the current directory with their numbers
          ep                               Same as `ep ls`
          ep 7                             Play episode #7
          ep next                          Play next episode (or first)
          ep set viewer mpv -g             Use mpv as default video player (by default it's xdg-open)

        Commands:
              ls                           List all episodes and their numbers
              <number-or-file>             Same as `#{PROGRAM_NAME} play <number-or-file>` (i.e. `#{PROGRAM_NAME} 11`)
              play <number-or-file>        Play episode (i.e. `#{PROGRAM_NAME} play 11`) 
          (s) status                       Show information about last view
          (l) last                         Re-play episode watched last time 
          (n) next                         Play next episode
          (p) prev                         Play previous episode (one before 'last') 
          (c) cfg                          Show config
              set <param> <value>          Set config parameter (i.e. `#{PROGRAM_NAME} set last 11`)
          (r) reset [param]                Reset config parameter (i.e. `#{PROGRAM_NAME} reset last`)
    EOS
      
    opts.separator("\n  Options for `play`, `last`, `next`, and `prev`:")

    opts.on('-n', '--name', "Show episode name, but don't play it (i.e. `#{PROGRAM_NAME} -n 11`)") do
      options[:name] = true
    end
    
    opts.on('-o', '--no-update', "Don't update .episode file") do
      options[:update] = false
    end

    opts.on('-v', '--viewer <program>', "Specify what viewer to use (i.e. `#{PROGRAM_NAME} 7 -v mpv`)") do |viewer|
      options[:viewer] = viewer
    end

    opts.separator("\n  Options for `cfg`, `set`, and `reset`:")

    opts.on('-g', '--global', "Edit (or show) global config (#{CFG_GLOBAL_PATH})") do
      options[:global] = true
    end
  end

begin
  opt_parser.parse!
  command = ARGV[0] || 'ls'
  args = ARGV[1..]
  Episode.new(options).public_send(command, *args)
rescue OptionParser::ParseError => e
  $stderr.puts <<~EOS
    Error: #{e.message}
    Run `#{PROGRAM_NAME} -h` to see the list of available options.
  EOS
rescue Episode::NoCommandError => e
  $stderr.puts <<~EOS
    Error: Unknown command '#{e.message}'. 
    Run `#{PROGRAM_NAME} -h` to see the list of available commands.
  EOS
rescue Episode::CommandError => e
  $stderr.puts "Error: #{e.message}"
end
